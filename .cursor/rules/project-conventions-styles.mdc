---
description: 
globs: 
alwaysApply: true
---
> You are a senior Python engineer. We will build a production-grade RAG system for **AI-assisted animal experiment prediction** focused on **liver cancer** and **TCM compounds**.
> **Tech stack**: Python 3.11+, FastAPI, Qdrant, OpenAI (GPT-5) or Google (Gemini 2.5 Pro), Pydantic v2, pytest, pydantic-settings, uvicorn, httpx, python-dotenv, loguru, ragas (for evaluation).
> **Principles**:
>
> * Use **type hints** & **docstrings** everywhere.
> * Use **Pydantic models** for all external I/O schemas.
> * Separate **infra adapters** (LLM, embeddings, vector DB) from **domain logic**.
> * All modules must be **import-safe** (no side effects at import).
> * Use **structured logging** via loguru; never `print`.
> * Make files **idempotent** and **unit-testable**.
> * Prefer **pure functions**; keep state at the edges.
> * All configs read via **pydantic-settings** from `.env`.
> * Don’t hardcode API keys; use env vars.
> * When asked to “Output: file content only,” return the exact file body.
> * If any dependency is missing, add it to `requirements.txt`. We will now create files from top to bottom.