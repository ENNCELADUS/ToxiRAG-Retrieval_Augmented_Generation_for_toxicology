---
description: ToxiRAG coding standards and conventions for toxicology data processing and RAG implementation
alwaysApply: true
---

# ToxiRAG Coding Standards

## Code Style & Structure

- Use descriptive variable names that reflect toxicology domain concepts (e.g., `tumor_volume_mm3`, `dose_mg_per_kg`, `inhibition_rate_percent`)
- Follow Python PEP 8 with 88-character line limit (Black formatting)
- Use type hints for all function parameters and return values, especially for data structures containing toxicology data
- Prefer dataclasses over dictionaries for structured toxicology data (experiments, results, citations)

## Async/Await Patterns

- All database operations (LanceDB, embeddings) should be async
- Use `AsyncMock` in tests for async functions
- Properly handle async context managers for database connections
- Always await embedding generation calls

## Error Handling

- Use specific exception types for domain errors (e.g., `ToxicologyDataError`, `RetrievalError`)
- Log errors with context about what toxicology data was being processed
- Gracefully handle missing or malformed toxicology data with default values (`未说明`)
- Include source page information in error messages when available

## Testing Standards

- Always create unit tests with realistic data from actual toxicology papers
- Use real examples from `data/summaries/肝癌.md` for test fixtures
- Test with multiple papers' data, not just one
- Mock external dependencies (OpenAI embeddings, database connections) but use real data structures
- Include edge cases for malformed toxicology data

## Data Handling

- Always normalize units according to the established conventions (mm³ for tumor volume, mg/kg for dose, etc.)
- Use the standardized citation format: `[E1 · 实验分组与给药]`
- Store original values alongside normalized ones for traceability
- Include metadata about units version and calculation methods
- Handle bilingual content (Chinese/English) properly

## Python Environment

### When Conda Activation IS Required
- **Python execution**: `python script.py`, `python -m module`, `python -c "code"`
- **Package installation**: `pip install package_name`
- **Testing**: `pytest`, `python -m pytest`
- **Interactive Python**: `python`, `ipython`, `jupyter`
- **Python-based tools**: `streamlit run`, `uvicorn`, etc.

### When Conda Activation is NOT Needed
- **Git operations**: `git add`, `git commit`, `git push` (pure shell commands)
- **File operations**: `ls`, `cat`, `cp`, `mv`, `rm` (filesystem commands)
- **Text editing**: Editor operations, file reading/writing
- **Directory navigation**: `cd`, `pwd`, `mkdir`
- **System commands**: `echo`, `curl`, `wget`, `grep`

### Usage Pattern
```bash
# ❌ Unnecessary - git doesn't need conda
conda activate toxirag && git add .

# ✅ Correct - only activate when needed for Python
git add .
conda activate toxirag && python -m pytest
```

## Dependency Management

### Package Installation Protocol
- **ALWAYS UPDATE requirements.txt**: After installing any new package with `pip install`, immediately add it to `requirements.txt`
- Use specific version pinning when possible: `package==1.2.3` or compatible versions: `package>=1.2.0,<2.0.0`
- Install in conda environment: `conda activate toxirag && pip install package_name`
- Document the package purpose in a comment if not obvious

### Requirements.txt Maintenance
```bash
# After installing new package:
conda activate toxirag && pip install new-package==1.2.3
echo "new-package==1.2.3  # Purpose: description" >> requirements.txt

# Or update existing:
conda activate toxirag && pip freeze | grep new-package >> requirements.txt
```

### Version Control
- Commit requirements.txt changes with the code that uses the new dependency
- Include dependency rationale in commit messages
- Test installation on clean environment periodically

## Documentation

- Include docstrings with examples using toxicology domain terminology
- Document expected data formats and units for toxicology parameters
- Provide usage examples with realistic toxicology study scenarios
- Reference specific sections of toxicology papers when applicable
- **ALWAYS UPDATE description.md**: After implementing new features, immediately update `description.md` to reflect the latest system capabilities and usage instructions